//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;
use async_graphql::{SimpleObject, ComplexObject};
use serde_json::Value;
use uuid::Uuid;
use super::guard::OwnerGuard;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, SimpleObject)]
#[sea_orm(table_name = "passkey")]
#[graphql(complex, name = "Passkey")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    #[graphql(skip)]
    pub user_id: Uuid,

    #[graphql(guard = "OwnerGuard::new(self.user_id)")]
    pub content: Value,
}

#[ComplexObject]
impl Model {
    pub async fn user_id(&self) -> String {
        self.user_id.to_string()
    }
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::UserId",
        to = "super::user::Column::Id",
        on_update = "Restrict",
        on_delete = "Restrict"
    )]
    User,
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::User.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
