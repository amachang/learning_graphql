//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;
use async_graphql::{SimpleObject, ComplexObject};
use chrono::NaiveDateTime;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, SimpleObject)]
#[sea_orm(table_name = "user")]
#[graphql(complex, name = "User")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    #[graphql(skip)]
    pub id: Uuid,
    #[sea_orm(unique)]
    pub slug: Option<String>,
    pub name: Option<String>,
    pub comment: Option<String>,
    pub registered_at: NaiveDateTime,
}

#[ComplexObject]
impl Model {
    pub async fn id(&self) -> String {
        self.id.to_string()
    }
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::passkey::Entity")]
    Passkey,
    #[sea_orm(has_many = "super::post::Entity")]
    Post,
}

impl Related<super::passkey::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Passkey.def()
    }
}

impl Related<super::post::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Post.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
